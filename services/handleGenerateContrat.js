// Orchestre le flux de g√©n√©ration d'un contrat CPV
// G√©n√®re le .docx, le convertit en PDF, le signe, l'upload et met √† jour la BDD

import fs from 'fs';
import path from 'path';
import { generateContrat } from './generateContrat.js';
import { convertDocxToPdf } from './convertDocxToPdf.js';
import signPdf from './signPdf.js';
import { uploadToSupabase } from './uploadToSupabase.js';
import { updateContratInDatabase } from './updateContratInDatabase.js';

export const handleGenerateContrat = async (req, res) => {
  const { contrat_id, consommateur_id, producteur_id, installation_id } = req.body;

  console.log('üöÄ D√©but endpoint /generate');
  console.log('üìã Param√®tres re√ßus:', req.body);

  try {
    // √âtape 0 : V√©rification
    if (!contrat_id || !consommateur_id || !producteur_id || !installation_id) {
      throw new Error('Tous les identifiants sont requis');
    }

    // √âtape 1 : G√©n√©ration du .docx
    console.log('üìÑ G√©n√©ration du fichier .docx...');
    const generationResult = await generateContrat(contrat_id, consommateur_id, producteur_id, installation_id);

    if (!generationResult.success || !generationResult.hasDocxBuffer) {
      throw new Error('La g√©n√©ration du contrat a √©chou√©');
    }

    const docxBuffer = generationResult.docxBuffer;
    const tempDir = path.join('/app', 'temp');
    await fs.promises.mkdir(tempDir, { recursive: true }); // Assure que le dossier existe

    const docxFileName = `contrat-${contrat_id}.docx`;
    const pdfFileName = `contrat-${contrat_id}.pdf`;
    const signedPdfFileName = `contrat-${contrat_id}-signed.pdf`;

    const docxPath = path.join(tempDir, docxFileName);
    const signedPdfPath = path.join(tempDir, signedPdfFileName);

    console.log('üì¶ Buffer r√©cup√©r√©, taille:', docxBuffer.length, 'bytes');
    await fs.promises.writeFile(docxPath, docxBuffer);
    console.log('‚úÖ Fichier .docx √©crit:', docxPath);

    // √âtape 2 : Conversion DOCX ‚Üí PDF
    const pdfPath = await convertDocxToPdf(docxPath, tempDir);
    console.log('‚úÖ PDF g√©n√©r√©:', pdfPath);

    // √âtape 3 : Lecture du PDF en buffer
    const pdfBuffer = await fs.promises.readFile(pdfPath);
    console.log('üìÑ PDF lu en m√©moire, taille:', pdfBuffer.length, 'octets');

    // √âtape 4 : Signature
    await signPdf(pdfBuffer, signedPdfPath);
    console.log('‚úÖ PDF sign√©:', signedPdfPath);

    // √âtape 5 : Upload vers Supabase
    const supabaseKey = `contrats/consommateurs/${signedPdfFileName}`;
    const { publicUrl, fullPath } = await uploadToSupabase(signedPdfPath, supabaseKey);
    console.log('‚úÖ Fichier PDF sign√© upload√©:', fullPath);

    // √âtape 6 : Mise √† jour BDD
    await updateContratInDatabase(contrat_id, {
      statut: 'SIGNATURE_CONSOMMATEUR_OK',
      url_document: publicUrl // colonne renomm√©e
    });

    console.log('üéâ Contrat g√©n√©r√© et sign√© avec succ√®s!');
    console.log('üîó URL:', publicUrl);

    // √âtape 7 : R√©ponse client
    res.status(200).json({ success: true, url: publicUrl });

    // √âtape 8 : Nettoyage (optionnel)
    try {
      await fs.promises.unlink(docxPath);
      await fs.promises.unlink(pdfPath);
      await fs.promises.unlink(signedPdfPath);
      console.log('üßπ Fichiers temporaires supprim√©s');
    } catch (cleanupErr) {
      console.warn('‚ö†Ô∏è Erreur nettoyage fichiers:', cleanupErr.message);
    }

  } catch (error) {
    console.error('‚ùå Erreur generation contrat:', error);
    res.status(500).json({ success: false, message: error.message });
  }
};
