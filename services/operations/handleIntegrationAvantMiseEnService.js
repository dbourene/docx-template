// services/operations/handleIntegrationAvantMiseEnService.js
// G√®re les √©tapes post-signature du contrat par le producteur avant la mise en service

import { updateAnnexe21AfterSignature } from './updateAnnexe21AfterSignature.js';
import { sendAnnexe21OrNotification } from './sendAnnexe21OrNotification.js';
import { getUserInfo } from '../common/getUserInfo.js';
import { sendEmail } from '../sendEmail.js';
import supabase from '../../lib/supabaseClient.js';

export async function handleIntegrationAvantMiseEnService(contrat_id) {
  console.log(`üìÑ [Avant MES] D√©but du traitement pour le contrat ${contrat_id}`);


    try {
        // √âtape 10 : Mise √† jour de la d√©nommination du fichier annexe 21
        console.log(`üìÑ Lancement de la mise √† jour de l'annexe 21 pour le contrat ${contrat_id}...`);
        await updateAnnexe21AfterSignature(contrat_id);
        console.log(`‚úÖ Annexe 21 mise √† jour avec succ√®s pour le contrat ${contrat_id}`);
  
        // √âtape 11 : Envoi de l'annexe 21 √† ENEDIS ou de l'email de notification
        console.log(`üì® Envoi de l'annexe 21 ou notification pour le contrat ${contrat_id}...`);
        await sendAnnexe21OrNotification(contrat_id);
        console.log(`‚úÖ Annexe 21 ou notification envoy√©e pour le contrat ${contrat_id}`);

        // √âtape 12 : Notification du consommateur
        const { data: contratData, error } = await supabase
        .from('contrats')
        .select('consommateur_id, producteurs(contact_prenom, contact_nom)')
        .eq('id', contrat_id)
        .single();

        if (error) throw error;
        const consommateurInfo = await getUserInfo(contratData.consommateur_id);
        const producteur = contratData.producteurs;

        if (!consommateurInfo || consommateurInfo.role !== 'consommateur') {
            throw new Error("Impossible de r√©cup√©rer les informations du consommateur");
        }

        // Cr√©ation du message de notification au consommateur
  
        console.log('‚úÖ Informations du consommateur r√©cup√©r√©es:', consommateurInfo);

        const emailSubject = `Contrat de vente d'√©nergie locale sign√© par ${producteur.contact_prenom || 'un producteur'} ${producteur.contact_nom || ''}`;
        const emailHtml = `
        <p>Bonjour ${consommateurInfo.prenom},</p>
        <p>Le contrat de vente d'√©nergie locale a √©t√© sign√© par ${producteur.contact_prenom} ${producteur.contact_nom}.</p>
        <p>Il prendra effet au plus tard dans 15 jours (si vous avez refus√© le d√©lai l√©gal de r√©tractation), dans 30 jours (si vous avez accept√© le d√©lai l√©gal de r√©tractation).</p>
        <p>Vous serez inform√© prochainement par email de la date d√©finitive d'effet du contrat.</p>
        <p>Cordialement,</p>
        <p>L'√©quipe de Kinjo</p>
        `;

        console.log('üìß Envoi de l‚Äôemail de notification √†', consommateurInfo.email);

        await sendEmail({
            from: 'Helioze <onboarding@resend.dev>',// puis remplacer par 'Helioze <no-reply@notifications.helioze.fr>',
            to: ['dbourene@audencia.com'], // puis remplacer par consommateurInfo.email,
            subject: emailSubject,
            html: emailHtml
        });
        console.log('‚úÖ Email de notification envoy√© au consommateur');
        return {success: true};

    } catch (err) {
        console.error(`‚ùå Erreur dans handleIntegrationAvantMiseEnService :`, err);
        throw err;
    }
}