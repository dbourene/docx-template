// services/operations/operationPrm.js
// Ins√®re les PRM li√©s √† une op√©ration dans la table operation_prms

import supabase from '../../lib/supabaseClient.js';

export const operationPrm = async (operation_id) => {
  console.log('üöÄ D√©but de operationPrm pour operation_id =', operation_id);

  try {
    // 1Ô∏è‚É£ R√©cup√©ration de l'op√©ration
    const { data: operation, error: opError } = await supabase
      .from('operations')
      .select('id, numero_acc, producteur_id, start_date')
      .eq('id', operation_id)
      .single();

    if (opError || !operation) {
      throw new Error('Impossible de r√©cup√©rer les informations de l‚Äôop√©ration');
    }

    const { numero_acc, producteur_id, start_date } = operation;
    console.log(`üìÑ Op√©ration trouv√©e : ACC ${numero_acc}, producteur ${producteur_id}`);

    // 2Ô∏è‚É£ R√©cup√©ration des contrats li√©s √† ce producteur
    const { data: contrats, error: contratsError } = await supabase
      .from('contrats')
      .select('id, consommateur_id, installation_prm, consommateur_prm, consommateur_rang, date_signature_consommateur, statut')
      .eq('producteur_id', producteur_id)
      .in('statut', ['attente_d√©lai_l√©gal', 'attente_mes', 'en_cours']);

    if (contratsError) {
      throw new Error('Erreur lors de la r√©cup√©ration des contrats : ' + contratsError.message);
    }

    if (!contrats || contrats.length === 0) {
      console.log('‚ö†Ô∏è Aucun contrat √©ligible trouv√© pour ce producteur.');
      return { success: true, insertedCount: 0 };
    }

    console.log(`üìã ${contrats.length} contrats trouv√©s pour le producteur ${producteur_id}`);

    // 3Ô∏è‚É£ Pr√©paration des enregistrements √† ins√©rer
    const records = contrats.map((c) => ({
      operation_id,
      numero_acc,
      date_demande_entree: c.date_signature_consommateur,
      date_entree: start_date,
      producteur_id,
      consommateur_prm: c.consommateur_prm,
      installation_prm: c.installation_prm,
      consommateur_id: c.consommateur_id,
      consommateur_rang: c.consommateur_rang,
    }));

    // 4Ô∏è‚É£ Insertion en base dans operation_prms
    const { error: insertError } = await supabase
      .from('operation_prms')
      .insert(records);

    if (insertError) {
      throw new Error('Erreur lors de l‚Äôinsertion dans operation_prms : ' + insertError.message);
    }

    console.log(`‚úÖ ${records.length} PRM ins√©r√©s dans operation_prms.`);
    return { success: true, insertedCount: records.length };

  } catch (error) {
    console.error('‚ùå Erreur dans operationPrm :', error);
    return { success: false, error: error.message };
  }
};
