// Convertit un fichier .docx en .pdf en utilisant LibreOffice
// T√©l√©charge le fichier depuis Supabase Storage, le convertit et le sauvegarde

import { exec } from 'child_process';
import path from 'path';
import { promises as fs } from 'fs';
import supabase from '../utils/supabaseClient.js';

/**
 * T√©l√©charge un fichier .docx depuis Supabase Storage et le convertit en .pdf √† l'aide de LibreOffice
 * @param {string} docxPath - chemin du fichier dans Supabase Storage (ex: "consommateurs/CPV_ProducteurNom_ConsommateurNom.docx")
 * @param {string} outputDir - r√©pertoire o√π enregistrer le PDF g√©n√©r√©
 * @returns {Promise<string>} - chemin complet vers le fichier .pdf g√©n√©r√©
 */
export async function convertDocxToPdf(docxPath, outputDir) {
  console.log('üöÄ D√©but de la conversion DOCX ‚Üí PDF');
  console.log('üìÅ Chemin Supabase Storage:', docxPath);
  console.log('üìÇ Dossier de sortie:', outputDir);

  try {
    // √âtape 1: T√©l√©charger le fichier .docx depuis Supabase Storage
    console.log('‚¨áÔ∏è T√©l√©chargement du fichier .docx depuis Supabase Storage...');
    
    const { data: fileData, error: downloadError } = await supabase.storage
      .from('contrats')
      .download(docxPath);

    if (downloadError) {
      console.error('‚ùå Erreur lors du t√©l√©chargement:', downloadError);
      throw new Error(`Impossible de t√©l√©charger le fichier depuis Supabase Storage: ${downloadError.message}`);
    }

    if (!fileData) {
      throw new Error(`Fichier non trouv√© dans Supabase Storage: ${docxPath}`);
    }

    console.log('‚úÖ Fichier t√©l√©charg√© depuis Supabase Storage, taille:', fileData.size, 'bytes');

    // √âtape 2: Sauvegarder temporairement le fichier .docx
    const fileName = path.basename(docxPath);
    const tempDocxPath = path.join('./temp/', fileName);
    
    console.log('üíæ Sauvegarde temporaire du fichier:', tempDocxPath);
    
    // Convertir le Blob en Buffer pour l'√©criture
    const arrayBuffer = await fileData.arrayBuffer();
    const buffer = Buffer.from(arrayBuffer);
    
    // Cr√©er le dossier temp s'il n'existe pas
    await fs.mkdir('./temp/', { recursive: true });
    
    // √âcrire le fichier temporaire
    await fs.writeFile(tempDocxPath, buffer);
    
    console.log('‚úÖ Fichier .docx sauvegard√© temporairement');

    // √âtape 3: Conversion en PDF (logique existante adapt√©e)
    const filenameWithoutExt = path.basename(tempDocxPath, '.docx');
    const outputPath = path.join(outputDir, `${filenameWithoutExt}.pdf`);

    console.log('üîÑ Conversion DOCX ‚Üí PDF avec LibreOffice...');
    console.log('üìÑ Fichier source:', tempDocxPath);
    console.log('üìÑ Fichier destination:', outputPath);

    return new Promise((resolve, reject) => {
      const command = `libreoffice --headless --convert-to pdf "${tempDocxPath}" --outdir "${outputDir}"`;
      
      console.log('‚öôÔ∏è Commande LibreOffice:', command);

      exec(command, async (error, stdout, stderr) => {
        try {
          if (error) {
            console.error('‚ùå Erreur lors de la conversion DOCX ‚Üí PDF:', stderr);
            return reject(new Error(`Erreur LibreOffice: ${stderr || error.message}`));
          }

          console.log('üìã Sortie LibreOffice:', stdout);

          // V√©rifier que le fichier PDF a bien √©t√© g√©n√©r√©
          try {
            await fs.access(outputPath);
            console.log('‚úÖ Fichier PDF g√©n√©r√© avec succ√®s:', outputPath);
            
            // Nettoyer le fichier temporaire .docx
            try {
              await fs.unlink(tempDocxPath);
              console.log('üßπ Fichier temporaire .docx supprim√©');
            } catch (cleanupError) {
              console.warn('‚ö†Ô∏è Impossible de supprimer le fichier temporaire:', cleanupError.message);
            }
            
            resolve(outputPath);
          } catch (fsError) {
            reject(new Error(`Fichier PDF non trouv√© apr√®s conversion: ${outputPath}`));
          }
        } catch (asyncError) {
          reject(asyncError);
        }
      });
    });

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale dans convertDocxToPdf:', error);
    throw error;
  }
}
